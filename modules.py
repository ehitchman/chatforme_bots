# # modules.py
# from discord.ext import commands
# import os
# import logging
# import yaml
# import dotenv

# import openai
# import requests
# import json
# import random



# # # call to chat gpt for completion TODO: Could add  limits here?
# # def openai_gpt_chatcompletion(messages_dict_gpt=None,OPENAI_API_KEY=None): 
# #     """
# #     Send a message to OpenAI GPT-3.5-turbo for completion and get the response.

# #     Parameters:
# #     - messages_dict_gpt (dict): Dictionary containing the message structure for the GPT prompt.
# #     - OPENAI_API_KEY (str): API key to authenticate with OpenAI.

# #     Returns:
# #     str: The content of the message generated by GPT.
# #     """    
# #     import openai

# #     #attach openai api key
# #     openai.api_key = OPENAI_API_KEY

# #     #request to openai
# #     completion = openai.ChatCompletion.create(
# #         model="gpt-3.5-turbo",
# #         #model="gpt-4-turbo",
# #         messages=messages_dict_gpt
# #     )
    
# #     #review what's been provided by GPT
# #     gpt_response = completion.choices[0].message['content']
# #     # print('---------- Prompt Message Dictionary')
# #     # print(messages_dict_gpt)
# #     # print("----------  GPT Response:")
# #     # print(completion.choices[0].message)

# #     #send the gpt response as discord bot message
# #     return gpt_response





# #Load parameters from config.yaml
# def load_yaml(yaml_filename='config.yaml', yaml_dirname='', is_testing=False):

#     """
#     Load parameters from a YAML file.

#     Parameters:
#     - yaml_filename (str): Name of the YAML file to be loaded.
#     - yaml_dirname (str): Directory path containing the YAML file.
#     - is_testing (bool): Flag to indicate if the function is being run for testing purposes.

#     Returns:
#     dict: Dictionary containing parameters loaded from the YAML file.
#     """
#     import yaml
#     import os

#     #is_testing = True
#     if is_testing == True:
#         yaml_dirname='C:\_repos\chatforme_bots\config'
#         yaml_filename='config.yaml'

#     # use the argument instead of hardcoding the path
#     yaml_filepath = os.path.join(os.getcwd(), yaml_dirname, yaml_filename)
#     with open(yaml_filepath, 'r') as file:
#         yaml_config = yaml.safe_load(file)
#         logging.info('LOG: YAML contents loaded successfully.')
        
#     return yaml_config


# #Loads environment variables from config.env
# def load_env(env_filename='config.env', env_dirname='config', is_testing=False):
#     import dotenv
#     """
#     Load environment variables from a .env file.

#     Parameters:
#     - env_filename (str): Name of the .env file.
#     - env_dirname (str): Directory path containing the .env file.
#     - is_testing (bool): Flag to indicate if the function is being run for testing purposes.
#     """
    
#     #is_testing = True
#     if is_testing ==True:
#         env_filename='config.env' 
#         env_dirname='C:\_repos\chatforme_bots\config'

#     env_filepath = os.path.join(os.getcwd(), env_dirname, env_filename)
#     if dotenv.load_dotenv(env_filepath):
#         logging.info('LOG: Environment file loaded successfully.')
#     else:
#         logging.error('LOG: Failed to load environment file.')


# # def get_models(api_key=None):
# #     """
# #     Function to fetch the available models from the OpenAI API.

# #     Args:
# #         api_key (str): The API key for the OpenAI API.

# #     Returns:
# #         dict: The JSON response from the API containing the available models.
# #     """
# #     url = 'https://api.openai.com/v1/models'

# #     headers = {
# #         'Authorization': f'Bearer {api_key}'
# #     }

# #     response = requests.get(url, headers=headers)

# #     return response.json()
